@page
@model ChatModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    var user = HttpContextAccessor.HttpContext.User.Identity.Name;
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">

<style>
    /* Chat container with background */
    .chat-container {
        
        background-size: cover;
        border-radius: 10px;
        padding: 15px;
        height: 400px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    /* Chat bubbles */
    .message {
        padding: 10px 14px;
        border-radius: 18px;
        max-width: 75%;
        font-size: 1rem;
        word-wrap: break-word;
    }

    /* Styling for received messages */
    .message-left {
        background: rgba(240, 240, 240, 0.9);
        text-align: left;
        align-self: flex-start;
    }

    /* Styling for sent messages */
    .message-right {
        background: rgba(0, 123, 255, 0.9);
        color: white;
        text-align: right;
        align-self: flex-end;
    }

    /* Input box and button styling */
    .chat-input {
        display: flex;
        gap: 10px;
    }

        .chat-input input {
            flex-grow: 1;
        }
</style>

<div class="container mt-4">
    <div class="row">
        <!-- Users Sidebar -->
        <div class="col-md-3 border-end">
            <h4>Users</h4>
            <ul class="list-group">
                @foreach (var u in Model.Users)
                {
                    <li class="list-group-item @(Model.SelectedUser == u.Username ? "active" : "")">
                        <a class="text-decoration-none text-dark" href="/Chat?SelectedUser=@u.Username">@u.Username</a>
                    </li>
                }
            </ul>
        </div>

        <!-- Chat Window -->
        <div class="col-md-9">
            @if (Model.SelectedUser != null)
            {
                <h4 class="mb-3">Chat with @Model.SelectedUser</h4>
                <div id="messages" class="chat-container" style="background: url('/Image/loginbg4.jpg') no-repeat center center; background-size: cover;">
                
                    @foreach (var message in Model.Messages)
                    {
                        <div class="d-flex @(message.Sender == user ? "justify-content-end" : "justify-content-start") mb-2">
                            <div class="message @(message.Sender == user ? "message-right" : "message-left")">
                                <strong>@message.Sender:</strong> @message.Content
                                <br><span style="font-size: 0.8rem;" class="text-muted">@message.Timestamp.ToShortTimeString()</span>
                            </div>
                        </div>
                    }
                </div>

                <!-- Message Input -->
                <div class="mt-3 chat-input">
                    <input id="messageInput" type="text" class="form-control" placeholder="Type a message..." />
                    <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                </div>
            }
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>
<script>
    // Create a connection to the SignalR hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    // Start the connection
    connection.start().then(() => {
        console.log("SignalR connection established.");
    }).catch(err => {
        console.error("SignalR connection failed:", err);
    });

    // Handle receiving a message
    connection.on("ReceiveMessage", (user, message) => {
        const messagesDiv = document.getElementById("messages");
        const alignClass = user === "@user" ? "justify-content-end" : "justify-content-start";
        const bubbleClass = user === "@user" ? "message-right" : "message-left";

        messagesDiv.innerHTML += `
            <div class="d-flex ${alignClass} mb-2">
                <div class="message ${bubbleClass}">
                    <strong>${user}:</strong> ${message}
                </div>
            </div>`;
        messagesDiv.scrollTop = messagesDiv.scrollHeight; // Auto-scroll
    });

    // Send a message
    function sendMessage() {
        const message = document.getElementById("messageInput").value;
        if (message.trim() !== "") {
            connection.invoke("SendMessage", "@user", "@Model.SelectedUser", message)
                .catch(err => console.error("Error sending message:", err));
            document.getElementById("messageInput").value = "";
        }
    }
</script>
